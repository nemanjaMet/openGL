void CGLRenderer::Draw3DTrapez(float a, float b, float h, float H)
{
	float chunk = (a - b) / 2;
	float hipotenuza = sqrt(chunk*chunk + h*h);
	glBegin(GL_QUADS);

	//bottom
	glNormal3f(0,-1,0);

	glVertex3f(0, 0, 0);
	glVertex3f(a, 0, 0);
	glVertex3f(a, 0, H);
	glVertex3f(0, 0, H);

	//top
	glNormal3f(0,1,0);

	glVertex3f((a - b) / 2, h, 0);
	glVertex3f((a - b) / 2, h, H);
	glVertex3f((a - b) / 2 + b, h, H);
	glVertex3f((a - b) / 2 + b, h, 0);
	
	//front
	glNormal3f(0, 0, 1);

	glVertex3f((a - b) / 2, h, H);
	glVertex3f(0, 0, H);
	glVertex3f(a, 0, H);
	glVertex3f((a - b) / 2 + b, h, H);

	//back

	glNormal3f(0, 0, -1);

	glVertex3f(0, 0, 0);
	glVertex3f((a - b) / 2, h, 0);
	glVertex3f((a - b) / 2 + b, h, 0);
	glVertex3f(a, 0 , 0);

	glEnd();

	float ugao = asin(h / hipotenuza) * 180 / 3.14159265;
	//left
	glPushMatrix();
	glRotatef(ugao, 0, 0, 1);

	glBegin(GL_QUADS);
	

	glNormal3f(0, 1, 0);

	glVertex3f(0, 0, 0);
	glVertex3f(0, 0, H);
	glVertex3f(hipotenuza, 0, H);
	glVertex3f(hipotenuza, 0, 0);

	glEnd();
	glPopMatrix();

	//right
	ugao = 180 - ugao;
	glPushMatrix();
	glTranslatef(a, 0, 0);
	glRotatef(ugao, 0, 0, 1);
	
	glBegin(GL_QUADS);


	glNormal3f(0, -1, 0);

	glVertex3f(0, 0, 0);
	glVertex3f(0, 0, H);
	glVertex3f(hipotenuza, 0, H);
	glVertex3f(hipotenuza, 0, 0);

	glEnd();
	glPopMatrix();
}

void CGLRenderer::DrawBolt(float a, float b, float hs, float H)
{
	//float a = 8;
	//float b = 4;
	float hT;
	//float H = 4;
	//racunica da h odgovara i ugao odgovaraju

	float chunk = (a - b) / 2;
	float hipotenuza = (a - b);
	hT = sqrt(hipotenuza*hipotenuza - chunk*chunk);
	
	//ugao u katetama
	float ugao = asin(hT / hipotenuza) * 180 / 3.14159265;
	//def trapez u pozitivnoj osi
	Draw3DTrapez(a, b, hT, H);
	/////

	////desni rotiran za 60stepeni
	glPushMatrix();

		glTranslatef(a, 0, 0);
		glRotatef(60, 0, 0, 1);
		Draw3DTrapez(a, b, hT, H);

	glPopMatrix();
	////
	///levi rotiran za 120 i pomeren za visinu produzenog trougla i za odsecak (a-b)
	glPushMatrix();

	glTranslatef(a + hipotenuza, a*sqrt(3.0f)/2, 0);
	glRotatef(120, 0, 0, 1);
	Draw3DTrapez(a, b, hT, H);

	glPopMatrix();

	//// smetrija ova dva (rotiranje za 180 step u odnosu na 180 osu i translacija da se poklope ( za a i H )
	glPushMatrix();
		glTranslatef(a, 0, H);
		glRotatef(180, 0, 1, 0);
		glPushMatrix();
	
			glTranslatef(a, 0, 0);
			glRotatef(60, 0, 0, 1);
			Draw3DTrapez(a, b, hT, H);

		glPopMatrix();


		glPushMatrix();

			glTranslatef(a + hipotenuza, a*sqrt(3.0f) / 2, 0);
			glRotatef(120, 0, 0, 1);
			Draw3DTrapez(a, b, hT, H);

		glPopMatrix();
	glPopMatrix();
	////

	//gornji trapezoid 
	glPushMatrix();

		glTranslatef(0, a*sqrt(3.0f), H);
		glRotatef(180, 1, 0, 0);
		Draw3DTrapez(a, b, hT, H);
	
	glPopMatrix();

	


	/*glPushMatrix();
	glRotatef(-60, 0, 0, 1);
	Draw3DTrapez(a, b, h, H);
	glPopMatrix();*/

}
void CGLRenderer::SetMaterial(COLORREF clr)
{
	//float step = 1.0f / 256.0f;

	//izvlacimo bajtove sa bojama
	BYTE red = clr & 255;
	clr = clr >> 8;
	BYTE green = clr & 255;
	clr = clr >> 8;
	BYTE blue = clr & 255;
	
	float niz[4] = { red / 256.0f, green / 256.0f, blue / 256.0f, 1 };
	glMaterialfv(GL_FRONT, GL_DIFFUSE, niz);
	
	//prepolovljujemo boje
	red = red >> 1;
	green = green >> 1;
	blue = blue >> 1;
	float niz2[4] = { red / 256.0f, green / 256.0f, blue / 256.0f, 1 };
	glMaterialfv(GL_FRONT, GL_AMBIENT, niz2);

}
void CGLRenderer::ScenaBajo(float a, float b, float h, float H)
{
	float precnikPrstena = a * sqrt(3.0f);
	float chunk = (a - b) / 2;
	SetMaterial(RGB(200, 200, 200));
	DrawBolt(a,b,h,H);

	glPushMatrix();
		glTranslatef(0, precnikPrstena, 0);
		SetMaterial(RGB(255, 0, 0));
		DrawBolt(a, b, h, H);
	glPopMatrix();
	glPushMatrix();
		glTranslatef(0, -precnikPrstena, 0);
		SetMaterial(RGB(0, 255, 255));
		DrawBolt(a, b, h, H);
	glPopMatrix();
	glPushMatrix();
		glTranslatef(precnikPrstena - chunk, precnikPrstena/2 , 0);
		SetMaterial(RGB(255, 0, 255));
		DrawBolt(a, b, h, H);
	glPopMatrix();
	glPushMatrix();
		glTranslatef(precnikPrstena - chunk, -precnikPrstena / 2, 0);
		SetMaterial(RGB(0, 0, 255));
		DrawBolt(a, b, h, H);
	glPopMatrix();


	///simetrija
	glPushMatrix();
	glRotatef(180, 0, 1, 0);
	glTranslatef(-a, 0, -H);
		glPushMatrix();
		glTranslatef(precnikPrstena - chunk, precnikPrstena / 2, 0);
		SetMaterial(RGB(255, 255, 0));
		DrawBolt(a, b, h, H);
		glPopMatrix();
		glPushMatrix();
		glTranslatef(precnikPrstena - chunk, -precnikPrstena / 2, 0);
		SetMaterial(RGB(0, 255, 0));
		DrawBolt(a, b, h, H);
		glPopMatrix();
	glPopMatrix();

	//
}